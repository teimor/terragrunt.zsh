#compdef terragrunt

local -a _terragrunt_cmds
_terragrunt_cmds=(
    'apply:Create or update infrastructure. [terraform command]'
    'console:Try Terraform expressions at an interactive command prompt. [terraform command]'
    'destroy:Destroy previously-created infrastructure. [terraform command]'
    'fmt:Reformat your configuration in the standard style. [terraform command]'
    'force-unlock:Release a stuck lock on the current workspace. [terraform command]'
    'get:Install or upgrade remote Terraform modules. [terraform command]'
    'graph:Generate a Graphviz graph of the steps in an operation. [terraform command]'
    'import:Associate existing infrastructure with a Terraform resource. [terraform command]'
    'init:Prepare your working directory for other commands. [terraform command]'
    'login:Obtain and save credentials for a remote host. [terraform command]'
    'logout:Remove locally-stored credentials for a remote host. [terraform command]'
    'metadata:Metadata related commands. [terraform command]'
    'output:Show output values from your root module. [terraform command]'
    'plan:Show changes required by the current configuration. [terraform command]'
    'providers:Show the providers required for this configuration. [terraform command]'
    'refresh:Update the state to match remote systems. [terraform command]'
    'show:Show the current state or a saved plan. [terraform command]'
    'state:Advanced state management. [terraform command]'
    'taint:Mark a resource instance as not fully functional. [terraform command]'
    'test:Experimental support for module integration testing. [terraform command]'
    'untaint:Remove the 'tainted' state from a resource instance. [terraform command]'
    'validate:Check whether the configuration is valid. [terraform command]'
    'version:Show the current Terraform version. [terraform command]'
    'workspace:Workspace management. [terraform command]'
    'aws-provider-patch:Overwrite settings on nested AWS providers to work around a Terraform bug (issue #13018).'
    'graph-dependencies:Prints the terragrunt dependency graph to stdout.'
    'hclfmt:Recursively find hcl files and rewrite them into a canonical format.'
    'render-json:Render the final terragrunt config, with all variables, includes, and functions resolved, as json. This is useful for enforcing policies using static analysis tools like Open Policy Agent, or for debugging your terragrunt config.'
    'run-all:Run a terraform command against a "stack" by running the specified command in each subfolder. E.g., to run "terragrunt apply" in each subfolder, use "terragrunt run-all apply".'
    'terragrunt-info:Emits limited terragrunt state on stdout and exits.'
    'validate-inputs:Checks if the terragrunt configured inputs align with the terraform defined variables.'
)

__apply() {
    _arguments \
        '-auto-approve[Skip interactive approval of plan before applying.]' \
        '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]' \
        '-compact-warnings[If Terraform produces any warnings that are not accompanied by errors, show them in a more compact form that includes only the summary messages.]' \
        '-input=[(true) Ask for input for variables if not directly set.]' \
        '-lock=[(true) Don'\''t hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace.]:lock:(true false)' \
        '-lock-timeout=[(0s) Duration to retry a state lock.]' \
        '-no-color[If specified, output won'\''t contain any color.]' \
        '-parallelism=[(10) Limit the number of parallel resource operations. Defaults to 10.]' \
        '-refresh=[(true) Update state prior to checking for differences. This has no effect if a plan file is given to apply.]' \
        '-state=[(terraform.tfstate) Path to read and save state (unless state-out is specified). Defaults to "terraform.tfstate".]:statefile:_files -g "*.tfstate"' \
        '-state-out=[(path) Path to write state to that is different than "-state". This can be used to preserve the old state.]:statefile:_files -g "*.tfstate"' \
        '*-target=[(resource) Resource to target. Operation will be limited to this resource and its dependencies. This flag can be used multiple times.]:target:__statelist' \
        '*-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
        '*-var-file=[(foo) Set variables in the Terraform configuration from a file. If "terraform.tfvars" or any ".auto.tfvars" files are present, they will be automatically loaded.]:file:_files -g "*.tfvars{,.json}"'
}

__console() {
    _arguments \
        '-state=[(terraform.tfstate) Path to read state.]' \
        '*-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
        '*-var-file=[(foo) Set variables in the Terraform configuration from a file. If "terraform.tfvars" or any ".auto.tfvars" files are present, they will be automatically loaded.]:file:_files -g "*.tfvars{,.json}"'
}

__destroy() {
    _arguments \
        '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]' \
        '-auto-approve[Skip interactive approval before destroying.]' \
        '-lock=[(true) Lock the state file when locking is supported.]:lock:(true false)' \
        '-lock-timeout=[(0s) Duration to retry a state lock.]' \
        '-no-color[If specified, output will contain no color.]' \
        '-parallelism=[(10) Limit the number of concurrent operations.]' \
        '-refresh=[(true) Update state prior to checking for differences. This has no effect if a plan file is given to apply.]' \
        '-state=[(terraform.tfstate) Path to read and save state (unless state-out is specified).]:statefile:_files -g "*.tfstate"' \
        '-state-out=[(path) Path to write state to that is different than "-state". This can be used to preserve the old state.]:statefile:_files -g "*.tfstate"' \
        '*-target=[(resource) Resource to target. Operation will be limited to this resource and its dependencies. This flag can be used multiple times.]:target:__statelist' \
        '*-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
        '*-var-file=[(foo) Set variables in the Terraform configuration from a file. If "terraform.tfvars" or any ".auto.tfvars" files are present, they will be automatically loaded.]:file:_files -g "*.tfvars{,.json}"'
}

__fmt() {
    _arguments \
        '-list=[(true) List files whose formatting differs (always false if using STDIN)]' \
        '-write=[(true) Write result to source file instead of STDOUT (always false if using STDIN or -check)]' \
        '-diff=[(false) Display diffs of formatting changes]' \
        '-check=[(false) Check if the input is formatted. Exit status will be 0 if all input is properly formatted and non-zero otherwise.]' \
        '-recursive=[(false) Also process files in subdirectories. By default, only the given directory (or current directory) is processed.]'
}

__force_unlock() {
    _arguments \
        "-force[Don't ask for input for unlock confirmation.]"
}

__get() {
    _arguments \
        '-update=[(false) If true, modules already downloaded will be checked for updates and updated if necessary.]' \
        '-no-color[Disable text coloring in the output.]'
}

__graph() {
    _arguments \
        '-draw-cycles[Highlight any cycles in the graph with colored edges. This helps when diagnosing cycle errors.]' \
        '-type=[(plan) Type of graph to output. Can be: plan, plan-destroy, apply, validate, input, refresh.]'
}

__import() {
    _arguments \
        '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]' \
        '-config=[(path) Path to a directory of Terraform configuration files to use to configure the provider. Defaults to pwd. If no config files are present, they must be provided via the input prompts or env vars.]' \
        '-allow-missing-config[Allow import when no resource configuration block exists.]' \
        '-input=[(true) Ask for input for variables if not directly set.]' \
        '-lock=[(true) Lock the state file when locking is supported.]:lock:(true false)' \
        '-lock-timeout=[(0s) Duration to retry a state lock.]' \
        '-no-color[If specified, output will contain no color.]' \
        '-state=[(PATH) Path to the source state file. Defaults to the configured backend, or "terraform.tfstate"]:statefile:_files -g "*.tfstate"' \
        '-state-out=[(PATH) Path to the destination state file to write to. If this is not specified, the source state file will be used. This can be a new or existing path.]:statefile:_files -g "*.tfstate"' \
        '*-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times. This is only useful with the "-config" flag.]' \
        '*-var-file=[(foo) Set variables in the Terraform configuration from a file. If "terraform.tfvars" or any ".auto.tfvars" files are present, they will be automatically loaded.]:file:_files -g "*.tfvars{,.json}"'
}

__init() {
    _arguments \
        '-backend=[(true) Disable backend or Terraform Cloud initialization for this configuration and use what was previously initialized instead.]' \
        '-backend-config=[Configuration to be merged with what is in the configuration file'\''s "backend" block. This can be either a path to an HCL file with key/value assignments (same format as terraform.tfvars) or a "key=value" format, and can be specified multiple times. The backend type must be in the configuration itself.]' \
        '-cloud=[(true) Alias to '\''-backend'\'' flag]' \
        '-force-copy[Suppress prompts about copying state data when initializating a new state backend. This is equivalent to providing a "yes" to all confirmation prompts.]' \
        '-from-module=[(SOURCE) Copy the contents of the given module into the target directory before initialization.]' \
        '-get=[(true) Disable downloading modules for this configuration.]' \
        '-input=[(true) Disable interactive prompts. Note that some actions may require interactive prompts and will error if input is disabled.]' \
        '-lock=[(true) Don'\''t hold a state lock during backend migration. This is dangerous if others might concurrently run commands against the same workspace.]:lock:(true false)' \
        '-lock-timeout=[(0s) Duration to retry a state lock.]' \
        '-no-color[If specified, output won'\''t contain any color.]' \
        '-plugin-dir[Directory containing plugin binaries. This overrides all default search paths for plugins, and prevents the automatic installation of plugins. This flag can be used multiple times.]:plugin_dir:_files -/' \
        '-reconfigure[Reconfigure a backend, ignoring any saved configuration.]' \
        '-migrate-state[Reconfigure a backend, and attempt to migrate any existing state.]' \
        '-upgrade=[(false) Install the latest module and provider versions allowed within configured constraints, overriding the default behavior of selecting exactly the version recorded in the dependency lockfile.]' \
        '-lockfile=[(readonly) Set a dependency lockfile mode. Currently only "readonly" is valid.]:lockfile:(readonly)' \
        '-ignore-remote-version=[(false) A rare option used for Terraform Cloud and the remote backend only. Set this to ignore checking that the local and remote Terraform versions use compatible state representations, making an operation proceed even when there is a potential mismatch. See the documentation on configuring Terraform with Terraform Cloud for more information.]'
}

__login() {
    _arguments \

}

__logout() {
    _arguments \

}

__output() {
    _arguments \
        '-state=[(path) Path to the state file to read. Defaults to "terraform.tfstate".]:statefile:_files -g "*.tfstate"' \
        '-no-color[If specified, output will contain no color.]' \
        '-json[If specified, machine readable output will be printed in JSON format]'
}

__plan() {
    _arguments \
        '-compact-warnings[If Terraform produces any warnings that are not accompanied by errors, shows them in a more compact form that includes only the summary messages.]' \
        '-destroy[Select the "destroy" planning mode, which creates a plan to destroy all objects currently managed by this Terraform configuration instead of the usual behavior.]' \
        '-detailed-exitcode[() Return detailed exit codes when the command exits. This will change the meaning of exit codes to: 0 - Succeeded, diff is empty (no changes) 1 - Errored 2 - Succeeded, there is a diff]' \
        '-input=[(true) Ask for input for variables if not directly set.]' \
        '-lock=[(true) Don'\''t hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace.]:lock:(true false)' \
        '-lock-timeout=[(0s) Duration to retry a state lock.]' \
        '-no-color[() If specified, output won'\''t contain any color.]' \
        '-out=[(path) Write a plan file to the given path. This can be used as input to the "apply" command.]' \
        '-parallelism=[(10) Limit the number of concurrent operations. Defaults to 10.]' \
        '-refresh=[(true) Skip checking for external changes to remote objects while creating the plan. This can potentially make planning faster, but at the expense of possibly planning against a stale record of the remote system state.]:refresh:(true false)' \
        '-refresh-only=[(false) Select the "refresh only" planning mode, which checks whether remote objects still match the outcome of the most recent Terraform apply but does not propose any actions to undo any changes made outside of Terraform.]:refresh-only:(true false)' \
        '-replace=[(resource) Force replacement of a particular resource instance using its resource address. If the plan would'\''ve normally produced an update or no-op action for this instance, Terraform will plan to replace it instead. You can use this option multiple times to replace more than one object.]' \
        '-state=[(statefile) A legacy option used for the local backend only. See the local backend'\''s documentation for more information.]:statefile:_files -g "*.tfstate"' \
        '*-target=[(resource) Limit the planning operation to only the given module, resource, or resource instance and all of its dependencies. You can use this option multiple times to include more than one object. This is for exceptional use only.]:target:__statelist' \
        '*-var[("foo=bar") Set a value for one of the input variables in the root module of the configuration. Use this option more than once to set more than one variable.]' \
        '*-var-file=[(foo) Load variable values from the given file, in addition to the default files terraform.tfvars and *.auto.tfvars. Use this option more than once to include more than one variables file.]:file:_files -g "*.tfvars{,.json}"'
}

__providers() {
    local -a __providers_cmds
    __providers_cmds=(
      'mirror:Mirrors the provider plugins needed for the current configuration'
      'schema:Prints the schemas of the providers used in the configuration'
    )
    _describe -t providers "providers commands" __providers_cmds

}

__providers_mirror() {
    _arguments \
      '-platform=[(os_arch) Choose which target platform to build a mirror for.]' \
      "*:target_dir:_files -/"
}

__providers_schema() {
    _arguments \
      '-json[]' \
      '::'
}

__refresh() {
    _arguments \
        '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]::backupfile:_files -g "*.backup"' \
        '-compact-warnings[If Terraform produces any warnings that are not accompanied by errors, show them in a more compact form that includes only the summary messages.]' \
        '-input=[(true) Ask for input for variables if not directly set.]' \
        '-lock=[(true) Lock the state file when locking is supported.]:lock:(true false)' \
        '-lock-timeout=[(0s) Duration to retry a state lock.]' \
        '-no-color[If specified, output won'\''t contain any color.]' \
        '-state=[(path) Path to read and save state (unless state-out is specified). Defaults to "terraform.tfstate".]:statefile:_files -g "*.tfstate"' \
        '-state-out=[(path) Path to write state to that is different than "-state". This can be used to preserve the old state.]:statefile:_files -g "*.tfstate"' \
        '*-target=[(resource) A Resource Address to target. Operation will be limited to this resource and its dependencies. This flag can be used multiple times.]:target:__statelist' \
        '*-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
        '*-var-file=[(foo) Set variables in the Terraform configuration from a file. If "terraform.tfvars" or any ".auto.tfvars" files are present, they will be automatically loaded.]:file:_files -g "*.tfvars{,.json}"'
}

__show() {
    _arguments \
        '-json[If specified, output the Terraform plan or state in a machine-readable form.]' \
        '-no-color[If specified, output won'\''t contain any color.]'
}

__state() {
    local -a __state_cmds
    __state_cmds=(
      'list:List resources in the state'
      'mv:Move an item in the state'
      'pull:Pull current state and output to stdout'
      'push:Update remote state from a local state file'
      'replace-provider:Replace provider for resources in the Terraform state'
      'rm:Remove instances from the state'
      'show:Show a resource in the state'
    )
    _describe -t state "state commands" __state_cmds
}

__state_list() {
  _arguments \
    '-state=[(statefile) Path to a Terraform state file to use to look up Terraform-managed resources. By default, Terraform will consult the state of the currently-selected workspace.]' \
    '-id=[(id) Filters the results to include only instances whose resource types have an attribute named id whose value equals the given id string.]' \
    "*:address:__statelist"
}

__state_mv() {
  _arguments \
    "-dry-run[If set, prints out what would've been moved but doesn't actually move anything.]" \
    '-backup=[(PATH) Path where Terraform should write the backup for the original state. This can"t be disabled. If not set, Terraform will write it to the same path as the statefile with a ".backup" extension.]:backupfile:_files -g "*.backup"' \
    '-backup-out=[(PATH) Path where Terraform should write the backup for the destination state. This can"t be disabled. If not set, Terraform will write it to the same path as the destination state file with a backup extension. This only needs to be specified if -state-out is set to a different path than -state.]:backupfile:_files -g "*.backup"' \
    "-lock=[(true) Lock the state files when locking is supported.]:lock:(true false)" \
    "-lock-timeout=[(0s) Duration to retry a state lock.]" \
    '-state=[(path) Path to the source state file. Defaults to the configured backend, or "terraform.tfstate"]:statefile:_files -g "*.tfstate"' \
    '-state-out=[(path) Path to the destination state file to write to. If this isn"t specified, the source state file will be used. This can be a new or existing path.]:statefile:_files -g "*.tfstate"' \
    "::" \
    ":source:__statelist" \
    ":destination: "
}

__state_push() {
  _arguments \
    "-force[Write the state even if lineages don't match or the remote serial is higher.]" \
    '-lock=[(true) Lock the state file when locking is supported.]:lock:(true false)' \
    "-lock-timeout=[(0s) Duration to retry a state lock.]" \
    "::" \
    ":destination:_files"
}

__state_replace_provider() {
  _arguments \
    '-auto-approve[Skip interactive approval.]' \
    '-backup=[(PATH) Path where Terraform should write the backup for the state file. This can"t be disabled. If not set, Terraform will write it to the same path as the state file with a ".backup" extension.]:backupfile:_files -g "*.backup"' \
    "-lock=[(true) Lock the state files when locking is supported.]:lock:(true false)" \
    "-lock-timeout=[(0s) Duration to retry a state lock.]" \
    '-state=[(PATH) Path to the source state file. Defaults to the configured backend, or "terraform.tfstate"]:statefile:_files -g "*.tfstate"' \
    ":from_provider_fqn:" \
    ":to_provider_fqn:"
}

__state_rm() {
  _arguments \
    "-dry-run[If set, prints out what would've been removed but doesn't actually remove anything.]" \
    '-backup=[(PATH) Path where Terraform should write the backup for the original state.]::backupfile:_files -g "*.backup"' \
    "-lock=[(true) Lock the state file when locking is supported.]:lock:(true false)" \
    "-lock-timeout=[(0s) Duration to retry a state lock.]" \
    '-state=[(PATH) Path to the state file to update. Defaults to the current workspace state.]:statefile:_files -g "*.tfstate"' \
    "*:address:__statelist"
}


__state_show() {
  _arguments \
    '-state=[(statefile) Path to a Terraform state file to use to look up Terraform-managed resources. By default it will use the state "terraform.tfstate" if it exists.]:statefile:_files -g "*.tfstate"' \
    "*:address:__statelist"
}

__statelist() {
    # Get the Terraform working directory and move there
    tf_working_dir="$(terragrunt terragrunt-info 2> /dev/null | grep WorkingDir | sed -r 's/.*: \"(.*)\"/\1/')"
    cd $tf_working_dir
    # Output the list of resources and use them for completion
    compadd $(terraform state list $opt_args[-state] 2> /dev/null)
}

__taint() {
    _arguments \
        '-allow-missing[If specified, the command will succeed (exit code 0) even if the resource is missing.]' \
        '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]:backupfile:_files -g "*.backup"' \
        '-lock=[(true) Lock the state file when locking is supported.]:lock:(true false)' \
        '-lock-timeout=[(0s) Duration to retry a state lock.]' \
        '-module=[(path)  The module path where the resource lives. By default this will be root. Child modules can be specified by names. Ex. "consul" or "consul.vpc" (nested modules).]' \
        '-state=[(path) Path to read and save state (unless state-out is  specified). Defaults to "terraform.tfstate".]:statefile:_files -g "*.tfstate"' \
        '-state-out=[(path) Path to write updated state file. By default, the "-state" path will be used.]:statefile:_files -g "*.tfstate"' \
        "*:address:__statelist"
}

__untaint() {
    _arguments \
    '-allow-missing[If specified, the command will succeed (exit code 0) even if the resource is missing.]' \
    '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]:backupfile:_files -g "*.backup"' \
    '-lock=[(true) Lock the state file when locking is supported.]:lock:(true false)' \
    '-lock-timeout=[(0s) Duration to retry a state lock.]' \
    '-module=[(path)  The module path where the resource lives. By default this will be root. Child modules can be specified by names. Ex. "consul" or "consul.vpc" (nested modules).]' \
    '-state=[(path) Path to read and save state (unless state-out is  specified). Defaults to "terraform.tfstate".]:statefile:_files -g "*.tfstate"' \
    '-state-out=[(path) Path to write updated state file. By default, the "-state" path will be used.]:statefile:_files -g "*.tfstate"'
}

__validate() {
    _arguments \
    '-no-color[If specified, output won'\''t contain any color.]' \
    '-json[Produce output in a machine-readable JSON format, suitable for use in text editor integrations and other automated systems. Always disables color.]' \
    ':dir:_files -/'
}

__version() {
    _arguments \
    '-json[Output the version information as a JSON object.]'
}

__workspace() {
    local -a __workspace_cmds
    __workspace_cmds=(
        'delete:Delete a workspace'
        'list:List Workspaces'
        'new:Create a new workspace'
        'select:Select a workspace'
        'show:Show the name of the current workspace'
    )
    _describe -t workspace "workspace commands" __workspace_cmds
}

_arguments '*:: :->command'

if (( CURRENT == 1 )); then
  _describe -t commands "terragrunt command" _terragrunt_cmds
  return
fi

local -a _command_args
case "$words[1]" in
  apply)
    __apply ;;
  console)
    __console;;
  destroy)
    __destroy ;;
  fmt)
    __fmt;;
  force-unlock)
    __force_unlock;;
  get)
    __get ;;
  graph)
    __graph ;;
  import)
    __import;;
  init)
    __init ;;
  login)
    __login ;;
  logout)
    __logout ;;
  output)
    __output ;;
  plan)
    __plan ;;
  providers)
    test $CURRENT -lt 3 && __providers
    [[ $words[2] = "mirror" ]] && __providers_mirror
    [[ $words[2] = "schema" ]] && __providers_schema
    ;;
  refresh)
    __refresh ;;
  show)
    __show ;;
  state)
    test $CURRENT -lt 3 && __state
    [[ $words[2] = "list" ]] && __state_list
    [[ $words[2] = "mv" ]] && __state_mv
    [[ $words[2] = "push" ]] && __state_push
    [[ $words[2] = "replace-provider" ]] && __state_replace_provider
    [[ $words[2] = "rm" ]] && __state_rm
    [[ $words[2] = "show" ]] && __state_show
    ;;
  taint)
    __taint ;;
  untaint)
    __untaint ;;
  validate)
    __validate ;;
  version)
    __version ;;
  workspace)
    test $CURRENT -lt 3 && __workspace ;;
esac
